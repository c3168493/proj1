// Program Designed by Aaron Bool - c3168493 - Engg1003
// This project has multiple aims:
// 1. Encryption of a message with a rotation cipher given the message text and rotation amount.
// 2. Decryption of a message encrypted with a rotation cipher given cipher text and rotation amount.
// 3. Encryption of a message with a substitution cipher given message text and alphabet substitution.
// 4. Decryption of a message encrypted with a substitution cipher given cipher text and substitutions.


#include <stdio.h>
void task1(char msg[]);                                         // Function for task 1.
void task2(char msg[]);                                         // Function for task 2.
void task3(char msg[]);                                         // Function for task 3.
void task4(char msg[]);                                         // Function for task 4.

int main() {
    
    int x;                                                      // x = switch case variable.
    char msg[100];                                              // String holding users input message.

    // Enter message
    printf("\nPlease enter a message:\t");
    gets(msg);                                                  // Note: 'fgets' was used instead of 'scanf' since fgets is unaffected by white spaces on input while scanf ends once a white space is entered. Aditionally, fgets was used over 'gets' because this will continue to store characters past the end of the buffer, which can be dangerous.
    
    // User interface options
    printf("\nPlease choose following options:\n");
    printf("1 = Encrypt message with a rotation cipher, given message text and rotation amount. (Task 1).\n");
    printf("2 = Decrypt message encrypted with a rotation cipher, given cipher text and rotation amount. (Task 2).\n");
    printf("3 = Encrypt message with a substitution cipher, given message text and alphabet substitution. (Task 3).\n");
    printf("4 = Decrypt message encrypted with a substitution cipher, given cipher text and substitutions. (Task 4).\n\n");
    scanf("%d", &x);

   // Switch case statements containing:
   // Case 1: Task 1 - Encryption with rotation cipher.
   // Case 2: Task 2 - Decryption with rotation cipher.
   // Case 3: Task 3 - Encryption with substitution cipher.
   // Case 4: Task 4 - Decryption with substitution cipher.
   switch(x){
    case 1: 
        task1(msg);
    break;


   case 2:
        task2(msg);
    break;


    case 3:
        task3(msg);
    break;
    
    case 4:
        task4(msg);
    break;    


   default:
   printf("\nError\n");
   }
    
    
    return (0);
}






// Function for Task 1:
// Input: User message to be encrypted with a rotation cipher given the message text and rotation amount.
// Output: Rotation cipher encrypted message in the form of a string.
void task1(char msg[]){
    
    int i, r;                                         // i = counter, r = rotation amount / key.                        
    
    // User menu asking for rotation amount / key.
    printf("Please enter a Rotation amount / Key:\t");
    scanf("%d", &r);
    
    // Loop shifting the array element [i], by the rotation amount r
        for(i = 0; (i <100  && msg[i] != '\0'); i++){
            msg[i] = msg[i] - r;
            
            // If a letter falls below the capital letter ASCII code (65-90), + number up to the top, creating rotation.
            // i.e. A becomes Z.
            if(msg[i]<65){
                msg[i] = msg[i] + 26;
                
                // If blank space in array message, replaces it with an actual blank space.
                if (msg[i]<58){
                    msg[i] = ' ';
                }
            }
        }
        
    printf("Encryption with rotation is: %s\n", msg);
}



// Function for Task 2:
// Input: User message to be decrypted with a rotation cipher given the message text and rotation amount.
// Output: Rotation cipher decrypted message in the form of a string.
void task2(char msg[]){
    
    int i, r;                                         // i = counter, r = rotation amount.     
    
    // User menu asking for rotation amount / key.
    printf("Please enter a Rotation amount / Key:\t");
    scanf("%d", &r);
    
    // Loop shifting the array element [i], by the rotation amount r.
      for(i = 0; (i <100  && msg[i] != '\0'); i++){
        msg[i] = msg[i] + r;
        
        // If a letter increases above the capital letter ASCII code (65-90), - number to the bottom, creating rotation.
        // i.e. Z becomes A.
        if(msg[i]>90){
            msg[i] = msg[i] - 26;
            
            // If blank space in array message, replaces it with an actual blank space.
            if (msg[i]<58){
                msg[i] = ' ' ;
            }
        }
      }

    printf("Decryption with rotation is: %s\n", msg);
}



// Function for task 3:
// Input: User message to be encrypted with a substitution cipher given message text and alphabet substitution.
// Output: Substitution cipher encrypted message in the form of characters.
void task3(char msg[]){

    char key[100];                                              // Key / Alphabet substitution.
    char eMsg[100];                                             // Encrypted message return.
    int i, k;                                                   // i = counter, k = temporary variable for substitution.

    // User menu asking for alphabet substitution.
    printf("Please enter an alphabet substitution: ");
    scanf("%s", key);

    for(i=0; (i <100  && msg[i] != '\0'); i++){
        k = msg[i] - 65;
        eMsg[i] = key[k];
    }

    printf("\nEncryption with substitution:\n");
 
    for(i=0; (i <100  && msg[i] != '\0'); i++){
        printf("%c", eMsg[i]);
    }
}


// Function for task 4:
// Input: User message to be decrypted with a substitution cipher given cipher text and substitutions.
// Output: Substitution cipher decrypted message in the form of a string.
void task4(char msg[]){
    
    char key[] = "QWERTYUIOPASDFGHJKLZXCVBNM";                  // Key / Alphabet substitution.
    char dMsg[100];                                             // Decrypted message return.
    char alph[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";                 // Standard alphabet used to allocate substitution to normal.
    int i, k;                                                   // i = substitution counter, k = alphabet counter.
    
    //printf("Please enter your substitutions: \t");
    //scanf("%s", key);
    
    for(i=0; (i <100  && key[i] != '\0'); i++){
        for(k=0; (k <100  && alph[k] != '\0'); k++){
        alph[k] == key[i];
        dMsg[i] = msg[k];
        
        printf("%s", dMsg[i]);
        }
    }
    
}
